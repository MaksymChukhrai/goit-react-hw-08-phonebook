{"version":3,"file":"static/js/279.a2242068.chunk.js","mappings":"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","sources":["components/filterContacts/Filter.jsx","pages/contacts/ContactsStyled.js","pages/contacts/ContactsPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'; \nimport { setFilter } from '../../redux/filtersSlice'; \n\nconst Filter = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = (e) => {\n    const value = e.target.value;\n    console.log(\"Filter value changed:\", value);\n    dispatch(setFilter(value)); // Відправка дії setFilter при зміні значення фільтру\n  };\n\n  return (\n  \n    <input\n      type=\"text\"\n      placeholder=\"Filter contacts\"\n      value={filter}\n      onChange={handleFilterChange}\n    />\n  );\n};\n\n\n\nexport default Filter;","import { Button } from 'antd';\nimport styled from 'styled-components';\n\nexport const StyledSubmitBtn = styled(Button)`\n  background-color: greenyellow;\n  &:hover {\n    background-color: red;\n  }\n`;","import React, { useEffect, useState } from 'react'; \nimport { useDispatch, useSelector } from 'react-redux';\nimport Filter from '../../components/filterContacts/Filter';\nimport Loader from 'components/Loader/Loader';\nimport { selectAuthentificated } from 'redux/authReducer';\nimport {\n  addContactThunk,\n  deleteContactThunk,\n  requestContactsThunk,\n  selectContactsError,\n  selectContactsIsLoading,\n  selectUserContacts,\n  updateContactThunk,\n} from 'redux/contactsReducer';\nimport  {selectFilter}  from '../../redux/filtersSlice'; // Импорт селектора фильтра\nimport { StyledSubmitBtn } from './ContactsStyled';\n\n\nconst Contacts = () => {\n  console.log(\"Contacts component rendering\");\n  const [editingContact, setEditingContact] = useState(null);\n  const [updatedContact, setUpdatedContact] = useState({ name: '', number: '' });\n\n  const authentificated = useSelector(selectAuthentificated);\n  const contacts = useSelector(selectUserContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n  const filter = useSelector(selectFilter); // Получение значения фильтра из Redux\n  // const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!authentificated) return;\n    console.log(\"Fetching contacts...\");\n    dispatch(requestContactsThunk());\n  }, [authentificated, dispatch]);\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const name = form.elements.contactName.value;\n    const number = form.elements.contactNumber.value;\n\n    if (contacts.some(contact => contact.name === name))\n      return alert(`Contact with name ${name} already exists!`);\n\n    dispatch(addContactThunk({ name, number }));\n  };\n\n  const handleEditContact = (contact) => {\n    setEditingContact(contact);\n    setUpdatedContact({\n      name: contact.name,\n      number: contact.number,\n    });\n  };\n\n  const handleSaveChanges = () => {\n    if (editingContact) {\n      const { id} = editingContact;\n      dispatch(updateContactThunk({ contactId: id, updatedData: { ...updatedContact } }));\n      setEditingContact(null);\n    }\n  };\n\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n  const filteredContacts = contacts?.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n     );\n     console.log(filteredContacts)\n\n  return (\n    <section>\n      <h1>Phonebook</h1>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <p>Name:</p>\n          <input name=\"contactName\" type=\"text\" required />\n        </label>\n        <br />\n        <label>\n          <p>Number:</p>\n          <input name=\"contactNumber\" type=\"text\" required />\n        </label>\n        <br /><br />\n        <StyledSubmitBtn htmlType=\"submit\">Add contact</StyledSubmitBtn>\n      </form>\n      <h3>Find contacts by name</h3>\n      <Filter />\n      {isLoading && <Loader />}\n      {error && <p>Oops, some error occured... {error}</p>}\n      <ul>\n      {showContacts &&\n  filteredContacts?.map((contact) => {\n    return (\n      <li key={contact.id}>\n        {editingContact && editingContact.id === contact.id ? (\n          <div>\n            {/* Форма редактирования контакта */}\n            <label>\n              <p>Name:</p>\n              <input\n                name=\"contactName\"\n                type=\"text\"\n                required\n                value={updatedContact.name}\n                onChange={(e) =>\n                  setUpdatedContact({\n                    ...updatedContact,\n                    name: e.target.value,\n                  })\n                }\n              />\n            </label>\n            <br />\n            <label>\n              <p>Number:</p>\n              <input\n                name=\"contactNumber\"\n                type=\"text\"\n                required\n                value={updatedContact.number}\n                onChange={(e) =>\n                  setUpdatedContact({\n                    ...updatedContact,\n                    number: e.target.value,\n                  })\n                }\n              />\n            </label>\n            <br />\n            <StyledSubmitBtn onClick={handleSaveChanges}>\n              Save changes\n            </StyledSubmitBtn>\n          </div>\n        ) : (\n          <div>\n            <h3>Name: {contact.name}</h3>\n            <p>Number: {contact.number}</p>\n            <button\n              onClick={() => handleDeleteContact(contact.id)}\n              type=\"button\"\n              aria-label=\"Delete contact\"\n            >\n              &times;\n            </button>\n            <button\n              onClick={() => handleEditContact(contact)}\n              type=\"button\"\n              aria-label=\"Edit contact\"\n            >\n              Edit contact\n            </button>\n          </div>\n        )}\n      </li>\n    );\n  })}\n\n      </ul>\n    </section>\n  );\n};\n\nexport default Contacts;\n"],"names":["filter","useSelector","state","dispatch","useDispatch","_jsx","type","placeholder","value","onChange","e","target","console","log","setFilter","StyledSubmitBtn","styled","Button","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","editingContact","setEditingContact","_useState3","name","number","_useState4","updatedContact","setUpdatedContact","authentificated","selectAuthentificated","contacts","selectUserContacts","isLoading","selectContactsIsLoading","error","selectContactsError","selectFilter","useEffect","requestContactsThunk","handleSaveChanges","id","updateContactThunk","contactId","updatedData","_objectSpread","showContacts","Array","isArray","length","filteredContacts","contact","toLowerCase","includes","_jsxs","children","onSubmit","event","preventDefault","form","currentTarget","elements","contactName","contactNumber","some","alert","concat","addContactThunk","required","htmlType","Filter","Loader","map","onClick","deleteContactThunk","handleEditContact"],"sourceRoot":""}